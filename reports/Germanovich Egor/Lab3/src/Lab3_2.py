from abc import ABC, abstractmethod
from datetime import datetime

class FileSystemComponent(ABC):
    @abstractmethod
    def get_size(self) -> int:
        pass

    @abstractmethod
    def display(self, indent: str = "") -> str:
        pass

class File(FileSystemComponent):
    def __init__(self, name: str, size: int, extension: str, created: datetime):
        self.name = name
        self.size = size
        self.extension = extension
        self.created = created

    def get_size(self) -> int:
        return self.size

    def display(self, indent: str = "") -> str:
        return f"{indent}üìÑ {self.name}.{self.extension} (Size: {self.size} bytes, Created: {self.created.strftime('%Y-%m-%d %H:%M:%S')})"

class Directory(FileSystemComponent):
    def __init__(self, name: str):
        self.name = name
        self.children = []

    def add(self, component: FileSystemComponent):
        self.children.append(component)

    def remove(self, component: FileSystemComponent):
        self.children.remove(component)

    def get_size(self) -> int:
        return sum(child.get_size() for child in self.children)

    def display(self, indent: str = "") -> str:
        result = f"{indent}üìÅ {self.name} (Size: {self.get_size()} bytes)\n"
        for child in self.children:
            result += child.display(indent + "  ") + "\n"
        return result.rstrip()

def create_file():
    name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞: ")
    size = int(input("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–≤ –±–∞–π—Ç–∞—Ö): "))
    extension = input("–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, txt, jpg): ")
    created = datetime.now()
    return File(name, size, extension, created)

def create_directory():
    name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ")
    return Directory(name)

def main():
    root = Directory("Root")
    while True:
        print("\n–ú–µ–Ω—é:")
        print("1. –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª")
        print("2. –î–æ–±–∞–≤–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é")
        print("3. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã")
        print("4. –í—ã–π—Ç–∏")
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")

        if choice == "1":
            file = create_file()
            current = root
            while True:
                print(f"\n–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {current.name}")
                print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
                for i, child in enumerate(current.children):
                    if isinstance(child, Directory):
                        print(f"{i + 1}. üìÅ {child.name}")
                print(f"{len(current.children) + 1}. –î–æ–±–∞–≤–∏—Ç—å –≤ —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é")
                dir_choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ —Ç–µ–∫—É—â—É—é: ")
                if dir_choice.isdigit() and 1 <= int(dir_choice) <= len(current.children):
                    current = current.children[int(dir_choice) - 1]
                else:
                    current.add(file)
                    break
        elif choice == "2":
            directory = create_directory()
            current = root
            while True:
                print(f"\n–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {current.name}")
                print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
                for i, child in enumerate(current.children):
                    if isinstance(child, Directory):
                        print(f"{i + 1}. üìÅ {child.name}")
                print(f"{len(current.children) + 1}. –î–æ–±–∞–≤–∏—Ç—å –≤ —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é")
                dir_choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ —Ç–µ–∫—É—â—É—é: ")
                if dir_choice.isdigit() and 1 <= int(dir_choice) <= len(current.children):
                    current = current.children[int(dir_choice) - 1]
                else:
                    current.add(directory)
                    break
        elif choice == "3":
            print("\n–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã:")
            print(root.display())
        elif choice == "4":
            break
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

if __name__ == "__main__":
    main()
